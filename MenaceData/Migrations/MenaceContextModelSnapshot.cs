// <auto-generated />
using System;
using MenaceData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MenaceData.Migrations
{
    [DbContext(typeof(MenaceContext))]
    partial class MenaceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Noughts_and_Crosses.AIMenace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AIMenace");
                });

            modelBuilder.Entity("Noughts_and_Crosses.Bead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid?>("MatchboxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchboxId");

                    b.ToTable("Bead");
                });

            modelBuilder.Entity("Noughts_and_Crosses.BoardPosition", b =>
                {
                    b.Property<string>("BoardPositionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BoardPositionId");

                    b.ToTable("BoardPosition");

                    b.HasData(
                        new
                        {
                            BoardPositionId = "         "
                        });
                });

            modelBuilder.Entity("Noughts_and_Crosses.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentBoardBoardPositionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<Guid>("P1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("P2Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrentBoardBoardPositionId");

                    b.HasIndex("P1Id");

                    b.HasIndex("P2Id");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("Noughts_and_Crosses.GameHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsGameFinished")
                        .HasColumnType("bit");

                    b.Property<Guid>("P1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("P2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("P1Id");

                    b.HasIndex("P2Id");

                    b.HasIndex("WinnerId");

                    b.ToTable("GameHistory");
                });

            modelBuilder.Entity("Noughts_and_Crosses.Matchbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AIMenaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BoardPositionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Draws")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AIMenaceId");

                    b.HasIndex("BoardPositionId");

                    b.ToTable("Matchbox");
                });

            modelBuilder.Entity("Noughts_and_Crosses.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Draws")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Player");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Player");
                });

            modelBuilder.Entity("Noughts_and_Crosses.TrainingHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TrainingHistory");
                });

            modelBuilder.Entity("Noughts_and_Crosses.TrainingRound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Draws")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<string>("Opponent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("TrainingHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingHistoryId");

                    b.ToTable("TrainingRound");
                });

            modelBuilder.Entity("Noughts_and_Crosses.Turn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AfterBoardPositionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BeforeBoardPositionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("GameHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("TurnPlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AfterBoardPositionId");

                    b.HasIndex("BeforeBoardPositionId");

                    b.HasIndex("GameHistoryId");

                    b.HasIndex("TurnPlayerId");

                    b.ToTable("Turn");
                });

            modelBuilder.Entity("Noughts_and_Crosses.PlayerHumanOnWeb", b =>
                {
                    b.HasBaseType("Noughts_and_Crosses.Player");

                    b.HasDiscriminator().HasValue("PlayerHumanOnWeb");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cf6f961-8ba9-4065-9e6e-05b93f2cde3f"),
                            Draws = 0,
                            Losses = 0,
                            Name = "Human",
                            Wins = 0
                        });
                });

            modelBuilder.Entity("Noughts_and_Crosses.PlayerMenace", b =>
                {
                    b.HasBaseType("Noughts_and_Crosses.Player");

                    b.Property<Guid>("MenaceEngineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainingHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("MenaceEngineId");

                    b.HasIndex("TrainingHistoryId");

                    b.HasDiscriminator().HasValue("PlayerMenace");
                });

            modelBuilder.Entity("Noughts_and_Crosses.PlayerOptimal", b =>
                {
                    b.HasBaseType("Noughts_and_Crosses.Player");

                    b.HasDiscriminator().HasValue("PlayerOptimal");
                });

            modelBuilder.Entity("Noughts_and_Crosses.PlayerRandom", b =>
                {
                    b.HasBaseType("Noughts_and_Crosses.Player");

                    b.HasDiscriminator().HasValue("PlayerRandom");
                });

            modelBuilder.Entity("Noughts_and_Crosses.Bead", b =>
                {
                    b.HasOne("Noughts_and_Crosses.Matchbox", null)
                        .WithMany("Beads")
                        .HasForeignKey("MatchboxId");
                });

            modelBuilder.Entity("Noughts_and_Crosses.Game", b =>
                {
                    b.HasOne("Noughts_and_Crosses.BoardPosition", "CurrentBoard")
                        .WithMany()
                        .HasForeignKey("CurrentBoardBoardPositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Noughts_and_Crosses.Player", "P1")
                        .WithMany()
                        .HasForeignKey("P1Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Noughts_and_Crosses.Player", "P2")
                        .WithMany()
                        .HasForeignKey("P2Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CurrentBoard");

                    b.Navigation("P1");

                    b.Navigation("P2");
                });

            modelBuilder.Entity("Noughts_and_Crosses.GameHistory", b =>
                {
                    b.HasOne("Noughts_and_Crosses.Player", "P1")
                        .WithMany()
                        .HasForeignKey("P1Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Noughts_and_Crosses.Player", "P2")
                        .WithMany()
                        .HasForeignKey("P2Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Noughts_and_Crosses.Player", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("P1");

                    b.Navigation("P2");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Noughts_and_Crosses.Matchbox", b =>
                {
                    b.HasOne("Noughts_and_Crosses.AIMenace", null)
                        .WithMany("Matchboxes")
                        .HasForeignKey("AIMenaceId");

                    b.HasOne("Noughts_and_Crosses.BoardPosition", "BoardPosition")
                        .WithMany()
                        .HasForeignKey("BoardPositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BoardPosition");
                });

            modelBuilder.Entity("Noughts_and_Crosses.TrainingRound", b =>
                {
                    b.HasOne("Noughts_and_Crosses.TrainingHistory", null)
                        .WithMany("Rounds")
                        .HasForeignKey("TrainingHistoryId");
                });

            modelBuilder.Entity("Noughts_and_Crosses.Turn", b =>
                {
                    b.HasOne("Noughts_and_Crosses.BoardPosition", "After")
                        .WithMany()
                        .HasForeignKey("AfterBoardPositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Noughts_and_Crosses.BoardPosition", "Before")
                        .WithMany()
                        .HasForeignKey("BeforeBoardPositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Noughts_and_Crosses.GameHistory", null)
                        .WithMany("Turns")
                        .HasForeignKey("GameHistoryId");

                    b.HasOne("Noughts_and_Crosses.Player", "TurnPlayer")
                        .WithMany()
                        .HasForeignKey("TurnPlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("After");

                    b.Navigation("Before");

                    b.Navigation("TurnPlayer");
                });

            modelBuilder.Entity("Noughts_and_Crosses.PlayerMenace", b =>
                {
                    b.HasOne("Noughts_and_Crosses.AIMenace", "MenaceEngine")
                        .WithMany()
                        .HasForeignKey("MenaceEngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Noughts_and_Crosses.TrainingHistory", "TrainingHistory")
                        .WithMany()
                        .HasForeignKey("TrainingHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenaceEngine");

                    b.Navigation("TrainingHistory");
                });

            modelBuilder.Entity("Noughts_and_Crosses.AIMenace", b =>
                {
                    b.Navigation("Matchboxes");
                });

            modelBuilder.Entity("Noughts_and_Crosses.GameHistory", b =>
                {
                    b.Navigation("Turns");
                });

            modelBuilder.Entity("Noughts_and_Crosses.Matchbox", b =>
                {
                    b.Navigation("Beads");
                });

            modelBuilder.Entity("Noughts_and_Crosses.TrainingHistory", b =>
                {
                    b.Navigation("Rounds");
                });
#pragma warning restore 612, 618
        }
    }
}
