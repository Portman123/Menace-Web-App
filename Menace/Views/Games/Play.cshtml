@using Menace.ViewModels

@model GamePlayState

@{
    //
    string GetTileClass(string board, int x, int y)
    {
        var tileValue = GetTileValue(board, x, y);

        return string.IsNullOrWhiteSpace(tileValue) ? "" : $"player{tileValue}";
    }

    // Reading tile value from string
    string GetTileValue(string board, int x, int y)
    {
        return board.Substring(x * 3 + y, 1);
    }
}

@{
    ViewData["Title"] = "PlayView";

    var board = GamePlayState.UnwrapBoard(Model.BoardBeforeInput);
}


<h1>Play Game</h1>

<h4>Game</h4>
<hr />

<div class="my-4 w-100 bg-dark text-centre" id="myChart" width="900" height="380">
    <section class="display text-light text-centre">
        Player <span class="display-player @( $"player{Model.CurrentPlayerSymbol}" )">@Model.CurrentPlayerSymbol</span>'s turn
    </section>
    <br />
    <section class="containerCustom">
        <div class="tile @( GetTileClass(board, 0, 0 ) )">@GetTileValue(board, 0, 0)</div>
        <div class="tile @( GetTileClass(board, 0, 1 ) )">@GetTileValue(board, 0, 1)</div>
        <div class="tile @( GetTileClass(board, 0, 2 ) )">@GetTileValue(board, 0, 2)</div>
        <div class="tile @( GetTileClass(board, 1, 0 ) )">@GetTileValue(board, 1, 0)</div>
        <div class="tile @( GetTileClass(board, 1, 1 ) )">@GetTileValue(board, 1, 1)</div>
        <div class="tile @( GetTileClass(board, 1, 2 ) )">@GetTileValue(board, 1, 2)</div>
        <div class="tile @( GetTileClass(board, 2, 0 ) )">@GetTileValue(board, 2, 0)</div>
        <div class="tile @( GetTileClass(board, 2, 1 ) )">@GetTileValue(board, 2, 1)</div>
        <div class="tile @( GetTileClass(board, 2, 2 ) )">@GetTileValue(board, 2, 2)</div>
    </section>
    <br />
    <section class="display announcer hide text-light text-centre"></section>
    <section class="controls">
        <button id="reset">Reset</button>
    </section>

    <form asp-action="Play" id="submitForm">
        <div class="form-group">
            <input type="submit" value="Submit" class="btn btn-primary" id="submitButton" />
        </div>
        <input type="hidden" asp-for="BoardBeforeInput" id="hiddenBoardBeforeInput" />
        <input type="hidden" asp-for="BoardAfterInput" id="hiddenBoardAfterInput" />
        <input type="hidden" asp-for="CurrentPlayerSymbol" id="hiddenCurrentPlayerSymbol" />
        <input type="hidden" asp-for="GameHistoryId" id="hiddenGameHistoryId" />
    </form>
</div>

<div>
    @{
        if(ViewBag.errors != null)
        {
            foreach(var error in ViewBag.errors)
            {
                //If there are any errors for a field...
                if(@error.errors.Count > 0)
                {
                    // We show the first error for that field
                    <p>@error.errors[0].ErrorMessage</p>
                }
            }
        }

    }
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
        <script src="~/js/NandCApplet.js"></script>
    }
    }
